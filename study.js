// Generated by CoffeeScript 1.7.1

/*
 * Standard Anki review system
 * Copyright: Damien Elmes <anki@ichi2.net>
 */
var study,
  __hasProp = {}.hasOwnProperty;

String.prototype.format = function() {
  var args, pattern;
  pattern = /\{\d+\}/g;
  args = arguments;
  return this.replace(pattern, function(capture) {
    return args[capture.match(/\d+/)];
  });
};

study = {
  state: "initial",
  lastCardShown: 0,
  currentCard: null,
  activityCount: 0,
  CID: 0,
  CQUESTION: 1,
  CANSWER: 2,
  CQUEUE: 3,
  CNID: 4,
  CLEFT: 5,
  CFAIL: 6,
  CINTS: 7,
  CORD: 8,
  deck: {
    stats: [0, 0, 0],
    cards: [],
    answers: []
  },
  targetURL: null,
  initStudy: function() {
    var i, _fn, _i;
    $("#overview").hide();
    $("#quiz").show();
    this.adjustQuizHeight();
    window.onbeforeunload = (function(_this) {
      return function() {
        if (_this.deck.answers.length) {
          return "Please save first.";
        } else {
          return null;
        }
      };
    })(this);
    _fn = (function(_this) {
      return function(i) {
        return $(document).bind('keyup', i.toString(), function() {
          return _this.answerCard(i);
        });
      };
    })(this);
    for (i = _i = 1; _i <= 4; i = ++_i) {
      _fn(i);
    }
    $("content").addClass("contentAjax");
    this.checkForNextCard();
  },
  getNextCard: function() {
    return this.currentCard = this.deck.cards.shift();
  },
  getCards: function(forceSend) {
    var ans, def, h;
    if (forceSend == null) {
      forceSend = false;
    }
    if (this.deck.cards.length !== 0 && !forceSend) {
      return this.drawQuestion();
    }
    if (this.deck.cards.length === 0) {
      this.showWaiting();
    }
    ans = this.deck.answers;
    this.deck.answers = [];
    h = {
      answers: ans
    };
    if (forceSend) {
      h['force'] = true;
    }
    return def = this.getJSON("/study/getCards", h, (function(_this) {
      return function(data) {
        var c, _i, _len, _ref;
        if (_this.targetURL) {
          window.location = _this.targetURL;
          return;
        }
        _this.hideWaiting();
        if (forceSend) {
          _this.updateStatus();
          return;
        }
        if (data.error) {
          alert("Your collection is in an inconsistent state. Please use Tools>Check Database on the computer version.");
        }
        _this.deck.stats = data.counts;
        _ref = data.cards;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _this.deck.cards.push(c);
        }
        if (!_this.deck.cards.length) {
          return window.location.reload();
        } else {
          return _this.drawQuestion();
        }
      };
    })(this));
  },
  saveThenGoto: function(url) {
    this.targetURL = url;
    return this.getCards(true);
  },
  checkForNextCard: function() {
    this.state = "initial";
    $("#qa").html("");
    this.vhide("#easebuts");
    this.vshow("#quiz");
    return this.getCards();
  },
  save: function() {
    if (this.deck.answers.length) {
      return this.getCards(true);
    }
  },
  drawQuestion: function() {
    var box;
    if (this.state === "initial") {
      this.getNextCard();
      this.state = "questionShown";
      this.lastCardShown = new Date().getTime();
      this.updateStatus();
      box = $("#qa_box");
      box[0].className = "card card" + (this.currentCard[this.CORD] + 1);
      $("#qa").html(this.wrappedQA("q"));
      this.vshow("#ansbut");
      return $("#ansbuta").focus();
    }
  },
  drawAnswer: function() {
    var b, buts, good, t, _i, _len;
    if (this.state !== "questionShown") {
      return false;
    }
    if (this.currentCardType() === "rev") {
      buts = [[1, "Soon", "1: Show this card again soon."], [2, "Hard", "2: Wait a little longer next time."], [3, "Good", "3: Wait longer next time."], [4, "Easy", "4: Wait a lot longer next time."]];
      good = 3;
    } else {
      buts = [[1, "Soon", "1: Show this card again soon."], [2, "Good", "2: Wait longer next time."], [3, "Easy", "3: Wait a lot longer next time."]];
      good = 2;
    }
    t = "<center><table border=0px><tr>";
    for (_i = 0, _len = buts.length; _i < _len; _i++) {
      b = buts[_i];
      t += "<td class=answertd valign=top align=center>\n" + this.currentCard[this.CINTS][b[0] - 1] + "<br><button id=ease" + b[0] + " class=\"standardAnswerButton\"\nonclick=\"study.answerCard(" + b[0] + ");\" title=\"" + b[2] + "\">" + b[1] + "</button></td>";
    }
    t += "</tr></table></center>";
    this.vhide("#ansbut");
    $("#easebuts").html(t);
    this.state = "answerShown";
    this.vshow("#easebuts");
    $("#qa").html(this.wrappedQA("a"));
    $("#ease" + good).focus();
    return false;
  },
  answerCard: function(ease) {
    if (this.state !== "answerShown") {
      return;
    }
    if (this.currentCardType() !== "rev" && ease === 4) {
      return;
    }
    this.state = "initial";
    this.updateStatusCount(ease);
    this.deck.answers.push([this.currentCard[this.CID], ease, new Date().getTime() - this.lastCardShown]);
    this.currentCard = null;
    return this.checkForNextCard();
  },
  updateStatus: function() {
    var acq, fail, left, rev, stats, t, _class;
    stats = this.deck.stats;
    if (!this.currentCard) {
      fail = 0;
      rev = 0;
      acq = 0;
      $("#rightStudyMenu").html("");
    } else {
      t = this.currentCard[this.CQUEUE];
      fail = "<font color=#990000>{0}</font>".format(stats[1]);
      rev = "<font color=#009900>{0}</font>".format(stats[2]);
      acq = "<font color=#0000ff>{0}</font>".format(stats[0]);
      if (t === 0) {
        acq = "<u>{0}</u>".format(acq);
      } else if (t === 1 || t === 3) {
        fail = "<u>{0}</u>".format(fail);
      } else {
        rev = "<u>{0}</u>".format(rev);
      }
      $("#rightStudyMenu").html("{0} + {1} + {2}".format(acq, fail, rev));
    }
    left = "";
    if (this.currentCard) {
      left = "<a class=mitem3 onclick='study.saveThenGoto(\"/edit/{0}\")'>Edit</a> ".format(this.currentCard[this.CNID]) + left;
      if (this.deck.answers.length) {
        _class = "mitem3";
      } else {
        _class = "mitem3 mitemgrey";
      }
      left += " <a class='" + _class + "' onclick='return study.save();'>Save</a>";
    }
    return $("#leftStudyMenu").html(left);
  },
  updateStatusCount: function(e) {
    var cur, s, t;
    t = this.currentCardType();
    s = this.deck.stats;
    cur = this.currentCard;
    if (t === "acq") {
      s[0]--;
      if (e === 1) {
        return s[1] += cur[this.CFAIL];
      } else if (e === 2) {
        return s[1] += cur[this.CFAIL] - 1;
      }
    } else if (t === "fail") {
      if (e === 1) {
        s[1] += cur[this.CFAIL] - Math.floor(cur[this.CLEFT] / 1000);
      }
      if (e === 2) {
        return s[1] -= 1;
      } else if (e === 3) {
        return s[1] -= Math.floor(cur[this.CLEFT] / 1000);
      }
    } else {
      s[2] -= 1;
      if (e === 1) {
        return s[1] += cur[this.CFAIL];
      }
    }
  },
  randomUniform: function(min, max) {
    return Math.random() * (max - min) + min;
  },
  vshow: function(elem) {
    return $(elem).removeClass("invisible");
  },
  vhide: function(elem) {
    return $(elem).addClass("invisible");
  },
  showWaiting: function() {
    return this.vshow("#activity");
  },
  hideWaiting: function() {
    return this.vhide("#activity");
  },
  showQuiz: function() {
    return this.vshow("#quiz");
  },
  getJSON: function(url, args, func, noWait) {
    var k, req, v;
    if (noWait == null) {
      noWait = false;
    }
    for (k in args) {
      if (!__hasProp.call(args, k)) continue;
      v = args[k];
      args[k] = JSON.stringify(args[k]);
    }
    args.ts = new Date().getTime();
    if (!noWait) {
      this.showWaiting();
    }
    req = $.getJSON(url, args, (function(_this) {
      return function(data) {
        var error;
        try {
          return func(data);
        } catch (_error) {
          error = _error;
          _this.log(error);
          try {
            return _this.log(error.stack);
          } catch (_error) {}
        }
      };
    })(this));
    return req.error((function(_this) {
      return function(xhr, status, error) {
        _this.hideWaiting();
        alert("Error while saving latest answers. Reloading...");
        return window.location.reload();
      };
    })(this));
  },
  wrappedQA: function(type) {
    var cnt, extra, key, repl, text;
    key = (type === "q" ? this.CQUESTION : this.CANSWER);
    text = this.currentCard[key];
    extra = "";
    cnt = 1;
    repl = function(all, match) {
      if (/.mp3/i.test(match)) {
        extra += "<div id=\"_player_" + cnt + "\"></div>\n<div id=\"jp_container_" + cnt + "\">\n <a href=\"#\" class=\"jp-play\">Play</a>\n <a href=\"#\" class=\"jp-pause\">Pause</a>\n</div>\n<script type=\"text/javascript\">\n  $(\"#_player_" + cnt + "\").jPlayer({\n   ready: function () {\n    $(this).jPlayer(\"setMedia\", {\n     mp3: \"" + match + "\"\n    });\n   },\n   ended: function () {\n    $(this).jPlayer(\"setMedia\", {\n     mp3: \"" + match + "\"\n    });\n    console.log(\"cur id \"+this.id);\n   },\n   error: function (event) {\n    if (event.jPlayer.error.type == $.jPlayer.error.URL) {\n        $(\"#jp_container_%(n)d .jp-play\").text(\"(missing audio)\");\n    } else {\n        console.log(\"Error playing file: \"+event.jPlayer.error.type);\n    }\n   },\n   cssSelectorAncestor: \"#jp_container_" + cnt + "\",\n   swfPath: \"/static/js\",\n   supplied: \"mp3\",\n   errorAlerts: true\n  });\n</script>";
        cnt += 1;
      }
      return "";
    };
    text = text.replace(/\[sound:(.+?)\]/g, repl);
    text = text.replace(/\[\[type:.+?\]\]/g, "");
    return text += extra;
  },
  currentCardType: function() {
    var t;
    if (this.currentCard === void 0) {
      return void 0;
    }
    t = this.currentCard[this.CQUEUE];
    if (t === 0) {
      return "acq";
    } else if (t === 1 || t === 3) {
      return "fail";
    } else {
      return "rev";
    }
  },
  log: function(x) {
    return console.log(x);
  },
  adjustQuizHeight: function() {
    return $("#qa_box").css("min-height", window.innerHeight / 1.5);
  },
  showDesc: function() {
    $("#shortdesc").hide();
    $("#fulldesc").show();
    return false;
  }
};

$(function() {
  return $("#studynow").focus();
});
